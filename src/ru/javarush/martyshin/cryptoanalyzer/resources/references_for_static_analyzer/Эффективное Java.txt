Третье преимущество статических фабричных методов заключается в
том, что, в отличие от конструкторов, они могут возвращать объект лю
бого подтипа их возвращаемого типа. Это дает вам большую гибкость в вы
боре класса возвращаемого объекта.
Одним из применений этой гибкости является то, что API может возвращать
объекты, не делая их классы открытыми. Сокрытие классов реализации таким
способом приводит к очень компактному API. Эта техника ведет к каркасам на
основе интерфейсов (раздел 4.6), в которых интерфейсы предоставляют естес
твенные возвращаемые типы для статических фабричных методов.
До Java 8 интерфейсы не могли иметь статических методов. По соглаше
нию статические фабричные методы для интерфейса с именем Туре размеща
лись в сопутствующем неинстанцируемом классе (раздел 2.4) с именем Types.
Например, Java Collections Framework содержит 45 реализаций интерфейсов,
предоставляя немодифицируемые коллекции, синхронизированные коллекции
и т.п. Почти все эти реализации экспортируются с помощью статических фа
бричных методов в одном неинстанцируемом классе (java .util. Collec
tions). Все классы возвращаемых объектов являются закрытыми.
Collections Framework API гораздо меньше, чем потребовалось бы в случае
экспорта 45 отдельных открытых классов, по одному для каждой реализации.
Это не только уменьшенный размер API, но и меньший концептуальный вес:
количество и сложность концепций, которые программисты должны освоить
для того, чтобы использовать API. Программист знает, что возвращаемый объ
ект имеет API, в точности предусмотренный его интерфейсом, так что нет не
обходимости читать дополнительную документацию для класса реализации.
Кроме того, использование такого статического фабричного метода требует
от клиента обращения к возвращаемому объекту через интерфейс, а не через
класс реализации, что в общем случае является хорошей практикой (раздел 9.8).