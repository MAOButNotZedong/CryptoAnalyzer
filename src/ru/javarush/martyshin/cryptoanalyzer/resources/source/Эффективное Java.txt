Одним из преимуществ статических фабричных методов является то,
что, в отличие от конструкторов, они имеют имена. Если параметры кон
структора не описывают возвращаемые объекты (и сами по себе не являются
ими), то хорошо подобранное имя статического фабричного метода легче в ис
пользовании, а получающийся в результате код оказывается более удобочитае
мым. Например, вместо конструктора Biginteger (int, int, Random), кото
рый возвращает объект Biginteger, который, вероятно, представляет собой
простое число, было бы лучше использовать статический фабричный метод с
именем Biginteger .probablePrime (этот метод был добавлен в Java 4).
Класс может иметь только один конструктор с заданной сигнатурой. Про
граммисты, как известно, обходят это ограничение путем предоставления кон
структоров, списки параметров которых отличаются только порядком типов их
параметров. Это плохая идея. Пользователь такого API не сможет вспомнить,
какой конструктор ему нужен, и в конечном итоге будет ошибаться и вызывать
неверный конструктор. Программисты, читающие код с такими конструктора
ми, без документации не будут знать, что делает этот код.
Благодаря наличию имен на статические фабричные методы не наклады
вается ограничение из предыдущего абзаца. В тех случаях, когда классу, как
представляется, требуется несколько конструкторов с одинаковой сигнатурой,
замените конструкторы статическими фабричными методами с тщательно по
добранными именами, чтобы подчеркнуть их различия.